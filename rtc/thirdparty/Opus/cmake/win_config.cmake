OPTION(CPU_INFO_BY_ASM "Detect cpu info by asm" ON)
OPTION(CPU_INFO_BY_C "Detect cpu info by C" OFF)
OPTION(CUSTOM_MODES "Custom modes" OFF)
OPTION(DISABLE_FLOAT_API "Do not build the float API" OFF)
OPTION(ENABLE_ASSERTIONS "Assertions" OFF)
OPTION(ENABLE_EXPERIMENTAL_AMBISONICS "Ambisonics Support" OFF)
OPTION(FIXED_DEBUG "Debug fixed-point implementation" OFF)
OPTION(FIXED_POINT "Compile as fixed-point (for machines without a fast enough FPU)" OFF)
OPTION(FLOAT_APPROX "Float approximations" OFF)
OPTION(FUZZING "Fuzzing" OFF)
OPTION(HAVE_ALLOCA_H "have the <alloca.h> header file" OFF)
OPTION(HAVE_ARM_NE10 "NE10 library" OFF)
OPTION(HAVE_DLFCN_H "dlfcn.h" ON)
OPTION(HAVE_INTTYPES_H "inttypes.h" ON)
OPTION(HAVE_LRINT "lrint" ON)
OPTION(HAVE_LRINTF "lrintf" ON)
OPTION(HAVE_MEMORY_H "memroy.h" ON)
OPTION(HAVE_STDINT_H "stdint.h" ON)
OPTION(HAVE_STDLIB_H "stdlib.h" ON)
OPTION(HAVE_STRINGS_H "strings.h" ON)
OPTION(HAVE_STRING_H "string.h" ON)
OPTION(HAVE_SYS_STAT_H "sys/stat.h" ON)
OPTION(HAVE_SYS_TYPES_H "sys/types.h" ON)
OPTION(HAVE_UNISTD_H "unistd.h" ON)
OPTION(HAVE___MALLOC_HOOK "__malloc_hook" OFF)
OPTION(OPUS_ARM_ASM "use of ARM asm optimization" OFF)
OPTION(OPUS_ARM_INLINE_ASM " Use generic ARMv4 inline asm optimizations " OFF)
OPTION(OPUS_ARM_INLINE_EDSP "Use ARMv5E inline asm optimizations" OFF)
OPTION(OPUS_ARM_INLINE_MEDIA "Use ARMv6 inline asm optimizations" OFF)
OPTION(OPUS_ARM_INLINE_NEON "Use ARM NEON inline asm optimizations" OFF)
OPTION(OPUS_ARM_MAY_HAVE_EDSP "Define if assembler supports EDSP instructions " OFF)
OPTION(OPUS_ARM_MAY_HAVE_MEDIA "Define if assembler supports ARMv6 media instructions" OFF)
OPTION(OPUS_ARM_MAY_HAVE_NEON "Define if compiler supports NEON instructions" OFF)
OPTION(OPUS_ARM_MAY_HAVE_NEON_INTR "Compiler supports ARMv7/Aarch64 Neon Intrinsics" OFF)
OPTION(OPUS_ARM_PRESUME_AARCH64_NEON_INTR "Define if binary requires Aarch64 Neon Intrinsics" OFF)
OPTION(OPUS_ARM_PRESUME_EDSP "Define if binary requires EDSP instruction support" OFF)
OPTION(OPUS_ARM_PRESUME_MEDIA "Define if binary requires ARMv6 media instruction support" OFF)
OPTION(OPUS_ARM_PRESUME_NEON "Define if binary requires NEON instruction support" OFF)
OPTION(OPUS_ARM_PRESUME_NEON_INTR "Define if binary requires NEON intrinsics support" OFF)
OPTION(OPUS_BUILD "This is a build of OPUS" ON)
OPTION(OPUS_HAVE_RTCD "Use run-time CPU capabilities detection" ON)
OPTION(OPUS_X86_MAY_HAVE_AVX "Compiler supports X86 AVX Intrinsics" ON)
OPTION(OPUS_X86_MAY_HAVE_SSE "Compiler supports X86 SSE Intrinsics" ON)
OPTION(OPUS_X86_MAY_HAVE_SSE2 "Compiler supports X86 SSE2 Intrinsics" ON)
OPTION(OPUS_X86_MAY_HAVE_SSE4_1 "Compiler supports X86 SSE4.1 Intrinsics" ON)
OPTION(OPUS_X86_PRESUME_AVX "Define if binary requires AVX intrinsics support" ON)
OPTION(OPUS_X86_PRESUME_SSE "Define if binary requires SSE intrinsics support" ON)
OPTION(OPUS_X86_PRESUME_SSE2 "Define if binary requires SSE2 intrinsics support" ON)
OPTION(OPUS_X86_PRESUME_SSE4_1 "Define if binary requires SSE4.1 intrinsics support" ON)
OPTION(STDC_HEADERS "Define to 1 if you have the ANSI C header files" ON)
OPTION(USE_ALLOCA "Make use of alloca " OFF)
OPTION(VAR_ARRAYS "Use C99 variable-size arrays" ON)

